[{"/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/index.js":"1","/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/App.js":"2","/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/reportWebVitals.js":"3","/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/components/Form/Form.js":"4","/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/components/Image/Image.js":"5"},{"size":589,"mtime":1612851299666,"results":"6","hashOfConfig":"7"},{"size":1232,"mtime":1613320231624,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1612699719572,"results":"9","hashOfConfig":"7"},{"size":2150,"mtime":1613320239316,"results":"10","hashOfConfig":"7"},{"size":2007,"mtime":1613320257101,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1tbn0kp",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/index.js",["25","26"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Form from './components/Form/Form';\nimport Image from './components/Image/Image';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["27","28"],"/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/App.js",["29"],"import logo from './logo.svg';\nimport './App.css';\nimport Form from './components/Form/Form';\n// import Memes from './section/Memes/Memes';\nimport Image from './components/Image/Image';\n// import { Component } from 'react';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        memes : []\n    }\n}\n\ncomponentDidMount() {\n    fetch('http://localhost:8081/memes',{\n        method:'GET',\n        headers: {'Content-Type': 'application/json'}\n    })\n    .then(data => {return data.json();})\n    .then(data => {\n        this.setState({\n            memes: data.map(meme => ({\n                id: meme.id,\n                name: meme.name,\n                caption: meme.caption,\n                url: meme.url\n            }))\n        });\n    })\n    .catch(err => {console.log(err);})\n}\n\n\n  render() {\n    const {memes} = this.state;\n        const memesPosted = memes.map(meme => <Image id={meme.id} name={meme.name} caption={meme.caption} url={meme.url} />);\n    return (\n      \n      <div className=\"App\">\n          <Form />\n          <div className=\"meme-section\">\n                {memesPosted}\n          </div>\n      </div> \n    );\n  }\n}\n\n\nexport default App;\n","/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/reportWebVitals.js",[],"/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/components/Form/Form.js",[],"/home/vaishnav/Desktop/PREP/CrioDo/CWoD/Stage-2B/deploy test/netlify/xmeme-frontend/src/components/Image/Image.js",["30","31","32"],{"ruleId":"33","severity":1,"message":"34","line":6,"column":8,"nodeType":"35","messageId":"36","endLine":6,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":13},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"33","severity":1,"message":"42","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"42","line":2,"column":8,"nodeType":"35","messageId":"36","endLine":2,"endColumn":12},{"ruleId":"33","severity":1,"message":"43","line":43,"column":12,"nodeType":"35","messageId":"36","endLine":43,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":55,"column":21,"nodeType":"46","endLine":55,"endColumn":86},"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"'logo' is defined but never used.","'key' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]